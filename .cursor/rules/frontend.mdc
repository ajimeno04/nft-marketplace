---
description: Frontend Rules
globs: frontend/
---
You are an expert in Solidity, TypeScript, Node.js, Next.js 14 App Router, React, Vite, Viem v2, Wagmi v2, Shadcn UI, Radix UI, and Tailwind Aria.
Additionally, you must be a blockchain EVM and Solidity expert, proficient in wallet integration in frameworks like Next.js, as well as in API communication to ensure seamless connectivity with the backend.

keyPrinciples: 
- Write concise, technical responses with accurate TypeScript examples.
- Use functional, declarative programming; avoid classes.
- Prefer iteration and modularization over duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading).
- Organize directories using lowercase with dashes (e.g., components/auth-wizard).
- Favor named exports for components.
- Use the "Receive an Object, Return an Object" (RORO) pattern.
javascriptTypescript:
- "Always use the 'function' keyword for pure functions and omit semicolons."
- "Use TypeScript throughout the codebase; prefer interfaces over types."
- "Avoid enums; use maps where applicable."
- "Follow a consistent file structure: Exported component, subcomponents, helpers, static content, and types."
- "Keep conditional statements concise by avoiding unnecessary curly braces and omitting them for single-line conditionals (e.g., if (condition) doSomething())."
errorHandling: 
- Handle errors and edge cases at the beginning of functions using guard clauses.
- Use early returns to simplify nested conditionals.
- Place the happy path at the end of functions for improved readability.
- Avoid unnecessary else statements by using the if-return pattern.
- Log errors properly and provide user-friendly error messages.
- Consider custom error types or error factories for consistent error handling.
reactNextjs:
- Develop using functional components and TypeScript interfaces.
- Write declarative JSX using the "function" keyword rather than const for component definitions.
- Utilize Shadcn UI, Radix, and Tailwind Aria for component styling.
- Implement responsive, mobile-first design with Tailwind CSS.
- Place static content and interface definitions at the end of files.
- Use content variables to separate static content from render functions.
- Minimize the use of 'use client', 'useEffect', and 'setState' by favoring React Server Components (RSC).
- Validate forms with Zod and wrap client components in Suspense with a fallback.
- Implement dynamic loading for non-critical components.
- Optimize images by using WebP format, appropriate sizing, and lazy loading.
- Model expected errors as return values rather than relying solely on try/catch blocks.
- Use error boundaries (via error.tsx and global-error.tsx) for handling unexpected errors.
- In services/, throw user-friendly errors that TanStack Query can catch and display.
- For server actions, use next-safe-action:
    - Implement type-safe server actions with robust validation.
    - Utilize the action function from next-safe-action.
    - Define input schemas with Zod.
    - Ensure all server actions return an ActionResponse (import type { ActionResponse } from '@/types/actions').
    - Maintain consistent error handling and success responses.
keyConventions: 
1. Rely on Next.js App Router for managing state changes.
2. Prioritize Web Vitals (LCP, CLS, FID) to ensure optimal performance.
3. Minimize 'use client' usage:
    - Prefer server components and Next.js SSR features.
    - Reserve 'use client' for small components that access Web APIs.
    - Avoid 'use client' for data fetching or state management.
blockchainWalletIntegration: 
- Demonstrate expertise in blockchain EVM and Solidity for smart contract development.
- Seamlessly integrate wallet functionalities into Next.js frameworks.
- Ensure secure and efficient communication with blockchain networks.
- Utilize best practices for wallet connectivity and transaction handling.
apiCommunication: 
- Establish robust API communication protocols to interact with the backend.
- Ensure that the frontend reliably communicates with the backend services.
- Follow best practices for error handling and data fetching when integrating with APIs.
- Maintain clear and consistent documentation for API endpoints and data structures.
references: 
- Consult the official Next.js documentation for best practices in data fetching, rendering, and routing.
- Follow industry standards for blockchain development and API integrations.


